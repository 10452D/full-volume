{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">armMaximum</variable></variables><comment id=\"#p;z:5oHHO-IGMo6]Qna\" x=\"452\" y=\"25\" h=\"242.71376037597656\" w=\"324.3868408203125\">Project Name: DragonBot Control\nSeason: Full Volume\nRobot Configuration: 1.0 E1\nAuthor(s): Henry\nCreated: 10/23/2023\nDescription: Driver Control for the DragonBot: our inital robot modified from the Byte Hero Bot\n</comment><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"10\" y=\"10\"><next><block type=\"iq_variables_set_variable\" id=\"=6l:;Ur5Xoo$b3L8q5iq\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">armMaximum</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"NB4FB(-5Ut6vhF]L;dHF\"><field name=\"NUM\">375</field></shadow></value><next><block type=\"iq_motion_set_motor_stopping\" id=\"5.S|WjZ;i2};s3=vRS*o\"><field name=\"MOTOR\">arm</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_velocity\" id=\"~m}5lp83DjO,HQ]5d,Jx\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"ZD}`4SnjJ{zANR(oxyb/\"><field name=\"NUM\">25</field></shadow></value><next><block type=\"iq_motion_set_motor_position\" id=\"`pX_tN0@7!Z.E92z,ve9\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\",fXc9RvxG_c~0Bua;Jev\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"3EvJ]W;H5x:6`PW8eX-b\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"WP=T~)DnorS{RYO=^i,d\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"Qqa@,fB1(t4_z_K;*0#y\"><field name=\"TOUCHLED\">rightStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"lI2HWc[c*LX`nI^mTMjM\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"%B9LQkL22HQ0=zzwr6JN\"><field name=\"TOUCHLED\">leftStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"oI!`j}/uPH_Rrd1aq_G!\"><field name=\"COLOR\">red</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_started\" id=\"e6W$kNeGkH(9K],M1i:3\" disabled=\"true\" x=\"830\" y=\"10\"><next><block type=\"iq_other_comment\" id=\"O3s-Hyc|.}h)~TP@JRmk\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"lhtWZ9k(IpSa]TX!tk*]\"><field name=\"comment\">This is used for testing.</field></shadow></value><next><block type=\"iq_control_forever\" id=\"r6jmVvPn4z`2^CWa!!JH\"><statement name=\"SUBSTACK\"><block type=\"iq_looks_print_new\" id=\"EQ-h=_Za9(61n27h%@u4\"><field name=\"TARGET\">Console</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"JteTG2lTfhrZ=.X_cY#Y\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_position_of_motor\" id=\"1mHdT5D=wBV066Sr;Ww/\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"iq_control_wait\" id=\"oOPe7Lq@lW@mGO})ThPD\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"isq8ZcGpkhugNTJii0-S\"><field name=\"NUM\">0.5</field></shadow></value></block></next></block></statement></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"Q)~(n61v!xlJbwl2Zuf6\" x=\"10\" y=\"450\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"~Hg*K6C;raDPrEn_T$1U\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">true</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"/Bi#43f!j##(TRSjMOX`\"><field name=\"NUM\">90</field></shadow><block type=\"iq_variables_variable\" id=\"Z`,S{@tMuJX_D/?QTyw]\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">armMaximum</field></block></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"f`Sh`CHRRO0JFCGxHJT{\" x=\"630\" y=\"450\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_looks_set_touchled_color\" id=\"W%}]:dfD*Fy3Lwn)9aYQ\"><field name=\"TOUCHLED\">rightStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"tj8+eQCiEH|1^5+GOJJc\"><field name=\"COLOR\">purple</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"[VqA5o(^Bq:JKlr9h^;4\"><field name=\"TOUCHLED\">leftStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"}=PVBv/!nf~[IVy`Kz3r\"><field name=\"COLOR\">purple</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"L]co8c,MR(b;FN4|lpWN\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">fwd</field></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"3|Nn`.@Q!,@/ZC#Mf2.?\" x=\"10\" y=\"690\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"fKr_j=B!=*$n%()2R-JR\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">true</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"U!p-fsm1~48}}K+:uz5=\"><field name=\"NUM\">0</field></shadow></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"9A#WCblgWidu2IG/yfdj\" x=\"630\" y=\"690\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_looks_set_touchled_color\" id=\"Y;2mJ=Q?4d%=NGz+TG!,\"><field name=\"TOUCHLED\">rightStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"%*PR|lHAfcOuL;Inuxl(\"><field name=\"COLOR\">green</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"gfNSDf[xOb)rEmSm~}Q@\"><field name=\"TOUCHLED\">leftStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"Tk^[b7.Gh$@jlqT]C,4[\"><field name=\"COLOR\">green</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"EIQB[OJ_Wxf99WMaNuSY\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">rev</field></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"]id^{At[THOVKu5m}6|%\" x=\"10\" y=\"1850\"><field name=\"BUTTON\">ButtonEUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_looks_set_touchled_color\" id=\"53w]?|eJdA{I9rv9oP_0\"><field name=\"TOUCHLED\">rightStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"Ww@umT3UNf#QwkHA[0|Y\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"Wqsv67UK(XTd}q@#k|W;\"><field name=\"TOUCHLED\">leftStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"kT3h@g,^feJWB[_~Ctg5\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_motion_stop_motor\" id=\"jwIc9o6y?ALQD$tdfy%3\"><field name=\"MOTOR\">intake</field></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"~vxlrB.X:$qQ#I=b=!:T\" x=\"10\" y=\"2130\"><field name=\"BUTTON\">ButtonFUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_looks_set_touchled_color\" id=\"NNAA,[mI[VRfq$eWma-G\"><field name=\"TOUCHLED\">rightStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"}TYB;FBBY,I7H.U|hQxV\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"/?#_^sfthbvILL}pKE^8\"><field name=\"TOUCHLED\">leftStatus</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"?JQm%3EQ|l-jm|01w,QQ\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_motion_stop_motor\" id=\"}3C6$jyhLu{NjD1z+*Li\"><field name=\"MOTOR\">intake</field></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[1,7,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5,11],"name":"arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"raise","rev":"lower","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[6],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"in","rev":"out"},"triportSourcePort":22},{"port":[8],"name":"rightStatus","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[2],"name":"leftStatus","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.1","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT7, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor armMotorA = motor(PORT5, false);\nmotor armMotorB = motor(PORT11, true);\nmotor_group arm = motor_group(armMotorA, armMotorB);\n\nmotor intake = motor(PORT6, false);\ntouchled rightStatus = touchled(PORT8);\ntouchled leftStatus = touchled(PORT2);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat armMaximum;\n\n// \"when started\" hat block\nint whenStarted1() {\n  armMaximum = 375.0;\n  arm.setStopping(hold);\n  arm.setVelocity(25.0, percent);\n  arm.setPosition(0.0, degrees);\n  intake.setVelocity(100.0, percent);\n  rightStatus.setColor(red);\n  leftStatus.setColor(red);\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  arm.spinToPosition(armMaximum, degrees, false);\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  rightStatus.setColor(purple);\n  leftStatus.setColor(purple);\n  intake.spin(forward);\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  arm.spinToPosition(0.0, degrees, false);\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  rightStatus.setColor(green);\n  leftStatus.setColor(green);\n  intake.spin(reverse);\n}\n\n// \"when Controller ButtonEUp pressed\" hat block\nvoid onevent_ControllerButtonEUp_pressed_0() {\n  rightStatus.setColor(red);\n  leftStatus.setColor(red);\n  intake.stop();\n}\n\n// \"when Controller ButtonFUp pressed\" hat block\nvoid onevent_ControllerButtonFUp_pressed_0() {\n  rightStatus.setColor(red);\n  leftStatus.setColor(red);\n  intake.stop();\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  // register event handlers\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n  Controller.ButtonEUp.pressed(onevent_ControllerButtonEUp_pressed_0);\n  Controller.ButtonFUp.pressed(onevent_ControllerButtonFUp_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}